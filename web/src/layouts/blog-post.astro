---
import GlobalLayout from "../layouts/global-layout.astro";
const { frontmatter } = Astro.props;
const dateString = new Date(frontmatter.date).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
});
---
<GlobalLayout title={frontmatter.title}>
    <style is:global>
        /* 関連記事のスタイル */
        .related-articles {
            max-width: 800px;
            margin: 48px auto 0;
            padding: 0;
        }
        .related-articles-grid {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 24px;
            padding: 0 ;
        }

        .related-article-card {
            background: var(--bg-color-level-2);
            border-radius: 12px;
            padding: 24px;
            transition: all 0.2s ease-in-out;
            text-decoration: none;
            color: inherit;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100%;
            min-height: 240px;
            box-sizing: border-box;
            overflow: hidden;
        }

        .related-article-card:hover {
            transform: translateY(-2px);
            background: var(--bg-color-level-3);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .related-article-emoji {
            font-size: 3.2em;
            margin-bottom: 16px;
            line-height: 1;
            flex-shrink: 0;
        }

        .related-article-title {
            font-size: 1.1em;
            font-weight: bold;
            margin: 0 0 12px 0;
            color: var(--text-color-level-0);
            text-align: center;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            width: 100%;
            flex-shrink: 0;
            min-height: 2.8em;
            line-height: 1.4;
            word-break: break-word;
            max-height: 2.8em;
        }

        .related-article-content {
            font-size: 0.9em;
            color: var(--text-color-level-2);
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
            margin: 0;
            line-height: 1.6;
            width: 100%;
            text-align: center;
            flex: 1;
            word-break: break-word;
            max-height: 4.8em;
            padding: 0 8px;
        }

        @media screen and (max-width: 800px) {
            .related-articles {
                margin: 32px auto 0;
            }

            .related-articles h2 {
                padding: 0 16px;
            }

            .related-articles-grid {
                grid-template-columns: 1fr;
                gap: 16px;
                padding: 0 16px;
            }

            .related-article-card {
                padding: 20px;
                min-height: 200px;
            }

            .related-article-emoji {
                font-size: 2.8em;
                margin-bottom: 12px;
            }

            .related-article-title {
                font-size: 1em;
            }

            .related-article-content {
                font-size: 0.85em;
            }
        }

        @media (prefers-color-scheme: dark) {
            .related-article-card:hover {
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            }
        }

        /* Markdown styles */
        .markdown {
            word-break: auto-phrase;
            text-wrap: pretty;
            font-family: -apple-system, BlinkMacSystemFont, 'Hiragino Sans', 'Hiragino Kaku Gothic ProN', 'ヒラギノ角ゴ ProN W3', 'Meiryo', 'メイリオ', 'Yu Gothic', 'YuGothic', '游ゴシック', 'MS Gothic', sans-serif;
            line-height: 1.8;
            letter-spacing: 0.01em;
            position: relative;
        }

        .markdown p {
            margin: 1.2em 0;
            line-height: 1.9;
            color: var(--text-color-level-0);
        }

        .markdown img {
            max-width: 100%;
        }

        .markdown h1,
        .markdown h2,
        .markdown h3,
        .markdown h4,
        .markdown h5,
        .markdown h6 {
            font-weight: normal;
            color: var(--text-color-level-0);
            line-height: 1em;
            position: relative;
            margin-top: 1.5em;
            padding-top: 0.5em;
        }

        /* 見出しの前に#マークを表示 */
        .markdown h1::before,
        .markdown h2::before,
        .markdown h3::before,
        .markdown h4::before,
        .markdown h5::before,
        .markdown h6::before {
            position: absolute;
            left: 0;
            top: -0.8em;
            color: var(--text-color-level-2, rgba(120, 120, 120, 0.5));
            opacity: 0.7;
            font-weight: normal;
            font-family: monospace;
            font-size: 0.6em;
            line-height: 1;
        }

        .markdown h1::before { content: "#"; }
        .markdown h2::before { content: "##"; }
        .markdown h3::before { content: "###"; }
        .markdown h4::before { content: "####"; }
        .markdown h5::before { content: "#####"; }
        .markdown h6::before { content: "######"; }

        .markdown h3,
        .markdown h4,
        .markdown h5,
        .markdown h6 {
            font-weight: bold;
        }

        .markdown h1 {
            font-size: 1.95em;
            margin-bottom: 1em;
            font-weight: bold;
        }

        .markdown h2 {
            font-size: 1.8em;
            border-bottom: 1px solid var(--text-color-level-0);
            padding-bottom: 0.3em;
            margin-top: 1.2em;
            margin-bottom: 0.3em;
            position: relative;
        }

        /* h2::beforeは共通定義で対応 */

        .markdown h3 {
            font-size: 1.5em;
            margin-top: 1.2em;
            margin-bottom: 0.2em;
        }

        .markdown h4 {
            font-size: 1.2em;
            margin-top: 1em;
            margin-bottom: 0.2em;
        }

        .markdown h5 {
            font-size: 1em;
            margin-top: 1em;
            margin-bottom: 0.2em;
        }

        .markdown h6 {
            font-size: 0.9em;
            margin-top: 1em;
            margin-bottom: 0.2em;
        }

        .markdown blockquote {
            color: var(--text-color-level-2);
            margin: 1.2em 0;
            padding: 0.5em 0 0.5em 1.5em;
            border-left: 0.2em var(--text-color-level-2) solid;
            background-color: var(--bg-color-level-2);
            border-radius: 0 4px 4px 0;
            font-size: 0.98em;
        }

        .markdown blockquote p {
            margin: 0.6em 0;
        }

        .markdown pre,
        .markdown code,
        .markdown kbd,
        .markdown samp {
            /* ダークモードではデフォルトで明るい色に */
            color: #e0e0e0;
            font-family: 'JetBrains Mono', 'Fira Code', 'SF Mono', 'Menlo', 'Consolas', 'Courier New', monospace;
            font-feature-settings: "liga" 0;
            font-size: 0.92em;
            line-height: 1.4;
        }

        .markdown p > code {
            background-color: var(--bg-color-level-4);
            padding: 0.1em 0.2em;
            border-radius: 2px;
            font-size: 0.92em;
            position: relative;
            margin: 0 0.5em;
        }

        .markdown p > code::before {
            content: "`";
            position: absolute;
            left: -0.5em;
            color: var(--text-color-level-2, rgba(120, 120, 120, 0.5));
            opacity: 0.7;
            font-family: monospace;
            font-size: 0.8em;
        }

        .markdown p > code::after {
            content: "`";
            position: absolute;
            right: -0.5em;
            color: var(--text-color-level-2, rgba(120, 120, 120, 0.5));
            opacity: 0.7;
            font-family: monospace;
            font-size: 0.8em;
        }

        .markdown pre {
            padding: 14px;
            white-space: pre;
            white-space: pre-wrap;
            word-wrap: break-word;
            margin: 1em 0;
            background-color: #2d2d2d;
            border-radius: 4px;
            position: relative;
            padding-top: 2em;
        }

        /* コードブロックはモードに関わらず常に同じ配色 */
        .markdown pre {
            background-color: #2d2d2d;
            color: #e0e0e0;
        }

        /* プレーンテキスト特有のスタイル */
        .markdown pre[data-language="plaintext"] {
            color: #f0f0f0;  /* さらに明るく */
        }

        /* インラインコードのみライトモードで調整 */
        @media (prefers-color-scheme: light) {
            .markdown p > code {
                background-color: #f3f3f3;
                color: #333;
            }
        }

        .markdown pre::before {
            content: "```";
            position: absolute;
            top: 0;
            left: 14px;
            color: #ddd;
            opacity: 0.85;
            font-family: monospace;
            font-size: 0.75em;
            line-height: 1.5;
        }

        .markdown pre::after {
            content: "```";
            position: absolute;
            bottom: 0;
            left: 14px;
            color: #ddd;
            opacity: 0.85;
            font-family: monospace;
            font-size: 0.75em;
            line-height: 1.5;
        }

        .markdown pre[data-language]::before {
            content: "```" attr(data-language);
            position: absolute;
            top: 0;
            left: 14px;
            color: #ddd;
            opacity: 0.85;
            font-family: monospace;
            font-size: 0.75em;
            line-height: 1.5;
        }

        /* ライトモードでのコード装飾 */
        @media (prefers-color-scheme: light) {
            .markdown pre::before,
            .markdown pre::after,
            .markdown pre[data-language]::before {
                color: #666;
            }
        }

        .markdown pre + pre {
            margin-top: -0.5em;
        }

        .markdown b,
        .markdown strong {
            font-weight: bold;
            position: relative;
            padding: 0 0.2em;
            margin: 0 0.5em;
        }

        .markdown b::before,
        .markdown strong::before {
            content: "**";
            position: absolute;
            left: -0.5em;
            color: var(--text-color-level-2, rgba(120, 120, 120, 0.5));
            opacity: 0.7;
            font-family: monospace;
            font-size: 0.8em;
        }

        .markdown b::after,
        .markdown strong::after {
            content: "**";
            position: absolute;
            right: -0.5em;
            color: var(--text-color-level-2, rgba(120, 120, 120, 0.5));
            opacity: 0.7;
            font-family: monospace;
            font-size: 0.8em;
        }

        .markdown ul,
        .markdown ol {
            margin: 1em 0;
            padding: 0 0 0 2em;
            font-size: 0.95em;
        }

        .markdown ul ul,
        .markdown ol ol,
        .markdown ul ol,
        .markdown ol ul {
            margin: 0.5em 0;
        }

        .markdown ul {
            list-style: none;
            padding-left: 1.8em;
        }

        .markdown ul > li {
            position: relative;
        }

        .markdown ul > li::before {
            content: "-";
            position: absolute;
            left: -1.2em;
            color: var(--text-color-level-2, rgba(120, 120, 120, 0.5));
            opacity: 0.7;
            font-family: monospace;
            font-size: 0.8em;
            line-height: 1.8;
        }

        .markdown ol {
            list-style: decimal;
        }

        .markdown li p:last-child {
            margin: 0;
        }

        .markdown dd {
            margin: 0 0 0 2em;
        }

        .markdown img {
            border: 0;
            -ms-interpolation-mode: bicubic;
            vertical-align: middle;
        }

        .markdown table {
            border-collapse: collapse;
            border-spacing: 0;
        }

        .markdown td {
            vertical-align: top;
        }

        /* 注釈用のスタイル */
        .markdown sup {
            font-size: 0.75em;
            line-height: 0;
            position: relative;
            vertical-align: baseline;
            top: -0.4em;
            display: inline-block;
            padding: 0 1px;
        }

        .markdown sup a {
            color: var(--text-color-level-1);
            text-decoration: none;
            border-bottom: 1px dotted var(--text-color-level-2);
        }

        .footnotes {
            margin-top: 3em;
            font-size: 0.9em;
            color: var(--text-color-level-2);
            border-top: 1px solid var(--bg-color-level-3);
            padding-top: 1em;
        }

        .footnotes p {
            line-height: 1.7;
            margin: 0.6em 0;
        }

        .footnotes .footnote-backref {
            text-decoration: none;
            margin-left: 0.3em;
        }

        /* OGP Card styles */
        .ogp-card {
            margin: 1em 0;
            display: flex;
            height: 96px;
            width: 100%;
            background-color: var(--bg-color-level-1);
            border: 1px solid var(--bg-color-level-3);
            border-radius: 8px;
            overflow: hidden;
            text-decoration: none;
            transition: all 0.2s ease-in-out;
        }

        .ogp-card:hover {
            transform: translateY(-1px);
            background-color: var(--bg-color-level-2);
            border-color: var(--bg-color-level-4);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .ogp-card img {
            width: 200px;
            height: 96px;
            object-fit: cover;
            order: 2;
            flex-shrink: 0;
            background-color: var(--bg-color-level-0);
        }

        .ogp-content {
            flex: 1;
            min-width: 0;
            padding: 12px 16px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            gap: 4px;
        }

        .ogp-content h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
            color: var(--text-color-level-0);
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            max-width: 100%;
        }

        .ogp-content p {
            margin: 0;
            font-size: 14px;
            color: var(--text-color-level-2);
            overflow: hidden;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            line-height: 1.4;
            max-height: 2.8em;
        }

        @media (prefers-color-scheme: dark) {
            .ogp-card:hover {
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            }

            .ogp-card img {
                opacity: 0.9;
            }
        }
    </style>
    <style>
            .container {
                max-width: 800px;
                margin: 32px auto;
                padding: 32px;
                border-radius: 16px;
                background-color: var(--bg-color-level-1);
            }

            @media screen and (max-width: 800px) {
                .container {
                    border-radius: 0px;
                    margin: 16px auto 0;
                }
            }

            .header {
                margin-bottom: 2em;
            }

            .title {
                font-size: 1.9em;
                font-weight: bold;
                margin: 0 0 1.2em 0;
                text-wrap: pretty;
            }

            .emoji {
                display: block;
                font-size: 6em;
                line-height: 1.3em;
                margin: 0 0 -0.2em 0;
                text-align: center;
            }

            time {
                display: block;
                font-size: 0.9em;
                color: var(--text-color-level-2);
                margin-bottom: 0.2em;
            }

            .author {
                margin-top: 2.4em;
                display: flex;
                align-items: center;
                justify-content: center;
                font-weight: bold;
                color: var(--text-color-level-1);
            }

            .author > img {
                margin-top: 0.2em;
                margin-right: 0.5em;
                width: 1.4em;
                height: 1.4em;
                border-radius: 50%;
                vertical-align: middle;
            }

            .eyecatch {
                width: 100%;
                max-height: 400px;
                object-fit: cover;
                border-radius: 8px;
                margin-bottom: 1.5em;
            }
    </style>
    <div class="container">
        <hgroup class="header">
            <time datetime={frontmatter.date}>{dateString}</time>
            <h1 class="title">
                {frontmatter.eyecatch ? `${frontmatter.emoji} ${frontmatter.title}` : frontmatter.title}
            </h1>
            {!frontmatter.eyecatch && (
                <p class="emoji">{frontmatter.emoji}</p>
            )}
            {frontmatter.eyecatch && (
                <img
                    src={`https://articles.yaakai.to/eyecatch?id=${frontmatter.eyecatch}`}
                    alt={frontmatter.title}
                    class="eyecatch"
                />
            )}
        </hgroup>
        <div class="markdown"><slot /></div>
    </div>
    <div class="related-articles">
        <div class="related-articles-grid" id="related-articles-container">
            <!-- 関連記事がここに動的に挿入されます -->
        </div>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", async function(event) {
            // a を target=_blank にする
            const links = document.querySelectorAll(".markdown a");
            links.forEach((link) => {
                if (link && link.getAttribute("href")?.startsWith("#")) {
                    return;
                }
                link.setAttribute("target", "_blank");
                // norefferer
                link.setAttribute("rel", "noopener noreferrer");
            });

            // 関連記事を取得して表示
            const pathname = window.location.pathname;
            let articleId = '';

            // blogの場合は末尾のslugを、noteの場合は末尾の番号を使用
            if (pathname.startsWith('/blog/')) {
                // /blog/2023/example や /blog/example から末尾のslugを取得
                const parts = pathname.split('/').filter(Boolean); // 空の要素を除去
                const slug = parts[parts.length - 1];
                if (slug) {
                    articleId = `blog-${slug}`;
                }
            } else if (pathname.startsWith('/note/')) {
                // /note/1 から末尾の番号を取得
                const parts = pathname.split('/').filter(Boolean);
                const number = parts[parts.length - 1];
                if (number) {
                    articleId = `note-${number}`;
                }
            }

            if (articleId) {
                try {
                    const response = await fetch(`https://articles.yaakai.to/related_articles?id=${articleId}`);
                    if (!response.ok) throw new Error('関連記事の取得に失敗しました');

                    const data = await response.json();
                    const container = document.getElementById('related-articles-container');
                    if (!container) return;

                    interface RelatedArticle {
                        url: string;
                        title: string;
                        emoji: string;
                        content: string;
                    }

                    (data.articles as RelatedArticle[]).forEach(article => {
                        const card = document.createElement('a');
                        card.href = article.url;
                        card.className = 'related-article-card';

                        card.innerHTML = `
                            <span class="related-article-emoji">${article.emoji}</span>
                            <h3 class="related-article-title">${article.title}</h3>
                            <p class="related-article-content">${article.content}</p>
                        `;

                        container.appendChild(card);
                    });
                } catch (error) {
                    console.error('関連記事の取得に失敗しました:', error);
                    const container = document.getElementById('related-articles-container');
                    if (container?.parentElement) {
                        container.parentElement.style.display = 'none';
                    }
                }
            }
        });
    </script>
</GlobalLayout>
