---
import { selectEmoji } from '../scripts/emoji-selector';

interface Props {
  title: string;
  date: string;
  emoji: string;
  url: string;
  eyecatch?: string;
}

const { title, date, emoji: propEmoji, url, eyecatch } = Astro.props;
const formattedDate = new Date(date).toLocaleDateString();

// Áõ∏ÂØæÊó•‰ªò„ÇíË®àÁÆó„Åô„ÇãÈñ¢Êï∞
function getRelativeDate(dateString: string): string {
  const date = new Date(dateString);
  const now = new Date();
  const diffTime = Math.abs(now.getTime() - date.getTime());
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));

  if (diffDays === 0) {
    return "‰ªäÊó•";
  } else if (diffDays === 1) {
    return "Êò®Êó•";
  } else if (diffDays < 7) {
    return `${diffDays}Êó•Ââç`;
  } else if (diffDays < 30) {
    return `${Math.floor(diffDays / 7)}ÈÄ±ÈñìÂâç`;
  } else if (diffDays < 365) {
    return `${Math.floor(diffDays / 30)}„É∂ÊúàÂâç`;
  } else {
    return `${Math.floor(diffDays / 365)}Âπ¥Ââç`;
  }
}

// „Ç´„ÉÜ„Ç¥„É™Âà§ÂÆö„Å®ÁµµÊñáÂ≠óÈÅ∏Êäû
// „Éá„Éï„Ç©„É´„Éà„ÅÆÁµµÊñáÂ≠ó„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÇÑÂçò„Å™„Çã„Éö„É≥„ÅÆÁµµÊñáÂ≠ó„ÅÆÂ†¥Âêà„ÅØËá™ÂãïÈÅ∏Êäû
const isDefaultEmoji = !propEmoji || propEmoji === 'üñäÔ∏è' || propEmoji === 'üñä';
const emoji = isDefaultEmoji ? selectEmoji(title) : propEmoji;

// ÁµµÊñáÂ≠ó„Åã„Çâ„Ç´„ÉÜ„Ç¥„É™Ëâ≤„Çí„Éû„ÉÉ„Éî„É≥„Ç∞
function getColorClassFromEmoji(emoji: string): string {
  // „É°„É¢„Éª„Éé„Éº„ÉàÁ≥ª
  if (['üìù', '‚úçÔ∏è', 'üñäÔ∏è', 'üìì', 'üìî', 'üìí', 'üìï', 'üìó', 'üìò', 'üìô'].includes(emoji)) {
    return 'note-category-notes';
  }
  // ÈñãÁô∫„Éª„Ç≥„Éº„Éá„Ç£„É≥„Ç∞Á≥ª
  else if (['üíª', 'üë®‚Äçüíª', 'üë©‚Äçüíª', 'üßë‚Äçüíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üöÄ', '‚öôÔ∏è', 'üîß', 'üî®', 'üõ†Ô∏è', 'üß∞'].includes(emoji)) {
    return 'note-category-dev';
  }
  // „Ç¢„Ç§„Éá„Ç¢„ÉªÊÄùËÄÉÁ≥ª
  else if (['üí°', 'üß†', 'ü§î', 'üí≠', '‚ú®', 'üîÆ'].includes(emoji)) {
    return 'note-category-idea';
  }
  // „Éá„Ç∂„Ç§„É≥Á≥ª
  else if (['üé®', 'üñåÔ∏è', 'üñçÔ∏è', '‚úèÔ∏è', 'üìê', 'üìè', 'üé≠', 'üëÅÔ∏è', 'üîç'].includes(emoji)) {
    return 'note-category-design';
  }
  // „Ç¶„Çß„ÉñÁ≥ª
  else if (['üåê', 'üîó', 'üì°', 'üì±', 'üì∂', 'üåç', 'üåé', 'üåè'].includes(emoji)) {
    return 'note-category-web';
  }
  // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Á≥ª
  else if (['üîí', 'üîì', 'üîê', 'üîë', 'üóùÔ∏è', 'üõ°Ô∏è'].includes(emoji)) {
    return 'note-category-security';
  }
  // „Éá„Éº„Çø„ÉªÂàÜÊûêÁ≥ª
  else if (['üìä', 'üìà', 'üìâ', 'üßÆ', 'üî¢', 'üìë', 'üìã'].includes(emoji)) {
    return 'note-category-data';
  }
  // ÂÆüÈ®ì„Éª„ÉÜ„Çπ„ÉàÁ≥ª
  else if (['üß™', 'üß´', 'üî¨', 'üî≠', 'üß¨'].includes(emoji)) {
    return 'note-category-experiment';
  }
  // „Éá„Éï„Ç©„É´„Éà
  else {
    return 'note-category-default';
  }
}

const categoryClass = getColorClassFromEmoji(emoji);
const relativeDate = getRelativeDate(date);
---

<a href={url} class="note-card-link">
  <div class={`note-card ${categoryClass}`}>
    <div class="note-indicator"></div>
    <div class="note-content">
      {eyecatch && (
        <img
          src={`https://articles.yaakai.to/eyecatch?id=${eyecatch}`}
          alt={title}
          class="note-eyecatch"
        />
      )}
      {!eyecatch && (
        <div class="note-emoji">{emoji}</div>
      )}
      <div class="note-info">
        <h3 class="note-title">
          {eyecatch ? `${emoji} ${title}` : title}
        </h3>
        <div class="note-date" title={formattedDate}>{relativeDate}</div>
      </div>
    </div>
  </div>
</a>

<style>
  .note-card-link {
    display: block;
    text-decoration: none;
    color: inherit;
    height: 100%;
  }

  .note-card {
    position: relative;
    background-color: var(--bg-color-level-1);
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    height: 100%;
    display: flex;
    flex-direction: column;
  }

  .note-card-link:hover .note-card {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  }
  .note-indicator {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 4px;
    background-color: var(--note-color);
  }

  /* „Ç´„ÉÜ„Ç¥„É™„Å´Âøú„Åò„Åü„Ç´„É©„Éº„Çπ„Çø„Ç§„É´ */
  .note-category-notes .note-indicator {
    background-color: #3498db; /* Èùí - „Éé„Éº„Éà/„É°„É¢ */
  }

  .note-category-dev .note-indicator {
    background-color: #2ecc71; /* Á∑ë - ÈñãÁô∫ */
  }

  .note-category-idea .note-indicator {
    background-color: #f39c12; /* „Ç™„É¨„É≥„Ç∏ - „Ç¢„Ç§„Éá„Ç¢ */
  }

  .note-category-design .note-indicator {
    background-color: #9b59b6; /* Á¥´ - „Éá„Ç∂„Ç§„É≥ */
  }

  .note-category-web .note-indicator {
    background-color: #1abc9c; /* „Çø„Éº„Ç≥„Ç§„Ç∫ - „Ç¶„Çß„Éñ */
  }

  .note-category-security .note-indicator {
    background-color: #e74c3c; /* Ëµ§ - „Çª„Ç≠„É•„É™„ÉÜ„Ç£ */
  }

  .note-category-data .note-indicator {
    background-color: #34495e; /* ÊøÉ„ÅÑÈùí - „Éá„Éº„Çø */
  }

  .note-category-experiment .note-indicator {
    background-color: #8e44ad; /* Á¥´ - ÂÆüÈ®ì */
  }

  .note-category-default .note-indicator {
    background-color: #7f8c8d; /* „Ç∞„É¨„Éº - „Éá„Éï„Ç©„É´„Éà */
  }


  .note-content {
    padding: 16px 16px 16px 24px;
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .note-eyecatch {
    width: 100%;
    height: 160px;
    object-fit: cover;
    border-radius: 4px;
    margin-bottom: 16px;
  }

  .note-emoji {
    font-size: 2.5em;
    margin-bottom: 16px;
    text-align: center;
  }

  .note-info {
    flex-grow: 1;
    display: flex;
    flex-direction: column;
  }

  .note-title {
    font-size: 1.2em;
    font-weight: bold;
    margin: 0 0 8px 0;
    line-height: 1.4;
    color: var(--text-color-level-0);
    text-decoration: none;
  }

  .note-card-link:hover .note-title {
    color: var(--primary-color-level-0);
  }

  .note-date {
    font-size: 0.9em;
    color: var(--text-color-level-2);
    margin-top: auto;
  }

  @media (prefers-color-scheme: dark) {
    .note-card {
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .note-card:hover {
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }
  }

  @media (max-width: 768px) {
    .note-content {
      padding: 12px 12px 12px 20px;
    }

    .note-emoji {
      font-size: 2em;
      margin-bottom: 12px;
    }

    .note-eyecatch {
      height: 120px;
      margin-bottom: 12px;
    }

    .note-title {
      font-size: 1.1em;
      margin: 0 0 6px 0;
    }
  }
</style>
